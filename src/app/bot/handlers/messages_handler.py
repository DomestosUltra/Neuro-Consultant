import uuid
import logging
import re
from datetime import datetime
from fastapi import Depends
from aiogram import Router, F
from aiogram.types import Message
from dependency_injector.wiring import inject, Provide
from aiogram.types import (
    Message,
    CallbackQuery,
)
from openai import AsyncOpenAI

from src.app.integrations.redis import RedisService
from src.app.core.containers import Container
from src.app.integrations.rmq.publisher import publish_to_queue
from src.app.services.intent_service import IntentService
from src.app.integrations.mygenetics_api import MyGeneticsClient
from src.app.services.vector_storage_service import VectorStorageService
from src.app.utils.embedding_utils import generate_embedding

from src.app.bot.keyboards.main_keyboards import (
    get_model_keyboard,
    get_auth_keyboard,
    get_auth_prompt_keyboard,
    get_auth_stage_keyboard,
)
from src.app.services.bot_functions import (
    log_interaction,
    check_rate_limit,
    set_model,
    get_model,
    is_response_processing,
    set_user_intent_with_lock,
    check_intent_lock,
    reset_intent_lock,
    get_user_intent,
    set_user_authentication,
    start_auth_process,
    is_auth_process_active,
    cancel_auth_process,
    is_user_authenticated,
    should_show_auth_prompt,
    get_auth_stage,
    set_auth_stage,
    authenticate_with_mygenetics,
)

logger = logging.getLogger(__name__)


router = Router(name="Messages")


@router.callback_query(F.data.startswith("model_"))
async def model_selection(callback: CallbackQuery):
    model: str = callback.data.split("_")[1]

    if model == "chatgpt":
        str_model = "ChatGPT"
    elif model == "yandexgpt":
        str_model = "YandexGPT"
    else:
        return

    await set_model(callback.from_user.id, model)
    await callback.message.answer(
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {str_model}</b> ü§ñ\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é."
    )

    await log_interaction(
        callback.from_user.id,
        callback.from_user.username or "",
        f"–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ {model}",
        f"–ú–æ–¥–µ–ª—å {model} –≤—ã–±—Ä–∞–Ω–∞.",
    )


@router.callback_query(F.data.startswith("agent_"))
async def agent_selection(callback: CallbackQuery):
    agent_type: str = callback.data.split("_")[1]
    user_id = str(callback.from_user.id)

    if agent_type == "reset":
        await reset_intent_lock(user_id)
        await callback.message.answer(
            "<b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–±—Ä–æ—à–µ–Ω</b> üîÑ\n–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."
        )
        await log_interaction(
            callback.from_user.id,
            callback.from_user.username or "",
            "–°–±—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
            "Intent lock —Å–±—Ä–æ—à–µ–Ω",
        )
        return

    # –ú–∞–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ intent
    specialist_names = {
        "diet": "–î–∏–µ—Ç–æ–ª–æ–≥",
        "fitness": "–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä",
        "medical": "–í—Ä–∞—á",
    }

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º intent –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ 2 –∑–∞–ø—Ä–æ—Å–∞
    await set_user_intent_with_lock(user_id, agent_type)

    specialist_name = specialist_names.get(agent_type, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")

    await callback.message.answer(
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {specialist_name}</b> üë®‚Äç‚öïÔ∏è\n\n"
        f"–°–ª–µ–¥—É—é—â–∏–µ 2 —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–∞ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º: <b>{specialist_name}</b>.\n"
        f"–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )

    await log_interaction(
        callback.from_user.id,
        callback.from_user.username or "",
        f"–í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist_name}",
        f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {specialist_name} –≤—ã–±—Ä–∞–Ω –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 2 –∑–∞–ø—Ä–æ—Å–∞",
    )


@router.callback_query(F.data.startswith("auth_"))
@inject
async def auth_callback(
    callback: CallbackQuery,
    mygenetics_client: MyGeneticsClient = Depends(
        Provide[Container.mygenetics_client]
    ),
):
    action: str = callback.data.split("_")[1]
    user_id = str(callback.from_user.id)

    if action == "prompt":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è" –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await start_auth_process(user_id)
        await set_auth_stage(user_id, "waiting_credentials")

        await callback.message.answer(
            "<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ MyGenetics</b> üîê\n\n"
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º—É —Ç–µ—Å—Ç—É "
            "–¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n"
            "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>",
            reply_markup=get_auth_keyboard(),
        )

        await log_interaction(
            callback.from_user.id,
            callback.from_user.username or "",
            "–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞",
            "–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        )
        return

    elif action == "enter_credentials":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
        await set_auth_stage(user_id, "waiting_credentials")

        await callback.message.answer(
            "<b>–í–≤–æ–¥ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö MyGenetics</b> üîí\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ MyGenetics –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å</code>\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru:mypassword</i>\n\n"
            "<i>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—á–µ—Ç–∞–º.</i>",
            reply_markup=get_auth_stage_keyboard("credentials"),
        )

    elif action == "credentials_entered":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª, —á—Ç–æ –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ (—É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
        await callback.message.answer(
            "<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ª–∞–±–∫–æ–¥</b> üìã\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∞–±–∫–æ–¥, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ—Ç—á–µ—Ç–µ MyGenetics, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞.\n\n"
            "<i>–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ª–∞–±–∫–æ–¥–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.</i>",
            reply_markup=get_auth_stage_keyboard("codelab"),
        )

        await set_auth_stage(user_id, "waiting_codelab")

    elif action == "codelab_entered" or action == "skip_codelab":
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await set_user_authentication(user_id, True)
        await cancel_auth_process(user_id)

        await callback.message.answer(
            "<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b> ‚úÖ\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ –æ–±—ã—á–Ω–æ."
        )

        await log_interaction(
            callback.from_user.id,
            callback.from_user.username or "",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ",
        )

    elif action == "cancel":
        # –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await cancel_auth_process(user_id)

        await callback.message.answer(
            "<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b> ‚ùå\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /auth."
        )

        await log_interaction(
            callback.from_user.id,
            callback.from_user.username or "",
            "–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            "–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
        )


@router.message(F.text)
@inject
async def handle_message(
    message: Message,
    intent_service: IntentService = Depends(Provide[Container.intent_service]),
    mygenetics_client: MyGeneticsClient = Depends(
        Provide[Container.mygenetics_client]
    ),
    vector_storage_service=Depends(Provide[Container.vector_storage_service]),
    openai_client: AsyncOpenAI = Depends(Provide[Container.openai_client]),
):
    if not await check_rate_limit(message.from_user.id):
        await message.answer(
            "<b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ ‚è≥"
        )
        return

    user_id: str = str(message.from_user.id)
    chat_id: str = str(message.chat.id)
    user_query: str = str(message.text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if await is_auth_process_active(user_id):
        auth_stage = await get_auth_stage(user_id)

        if auth_stage == "waiting_credentials":
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
            # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏–Ω–∞:–ø–∞—Ä–æ–ª—è
            credentials_regex = r"(.+?):(.+)"
            credentials_match = re.match(credentials_regex, user_query)

            if credentials_match:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                login, password = credentials_match.groups()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ MyGenetics API
                auth_result, _ = await authenticate_with_mygenetics(
                    user_id, login, password
                )

                if auth_result:
                    # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    await message.answer(
                        "<b>–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!</b> ‚úÖ\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ª–∞–±–∫–æ–¥, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ—Ç—á–µ—Ç–µ MyGenetics, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞.\n\n"
                        "<i>–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ª–∞–±–∫–æ–¥–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.</i>",
                        reply_markup=get_auth_stage_keyboard("codelab"),
                    )

                    await set_auth_stage(user_id, "waiting_codelab")
                else:
                    # –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await message.answer(
                        "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b> ‚ùå\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å</code>",
                        reply_markup=get_auth_stage_keyboard("credentials"),
                    )
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                await message.answer(
                    "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b> ‚ùå\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "<code>–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å</code>",
                    reply_markup=get_auth_stage_keyboard("credentials"),
                )

            return

        elif auth_stage == "waiting_codelab":
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ª–∞–±–∫–æ–¥–∞
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–±–∫–æ–¥ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await set_auth_stage(user_id, "completed")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∞–±–∫–æ–¥, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ
            from src.app.services.bot_functions import save_user_codelab

            await save_user_codelab(user_id, user_query)

            await message.answer(
                "<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b> ‚úÖ\n\n"
                f"–õ–∞–±–∫–æ–¥ <b>{user_query}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∫–∞–∫ –æ–±—ã—á–Ω–æ."
            )

            await cancel_auth_process(user_id)
            await set_user_authentication(user_id, True)

            await log_interaction(
                message.from_user.id,
                message.from_user.username or "",
                "–í–≤–æ–¥ –ª–∞–±–∫–æ–¥–∞",
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            )

            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    model: str = await get_model(user_id)

    if model is None or not model:
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b>",
            reply_markup=get_model_keyboard(),
        )
        return

    if isinstance(model, bytes):
        model = model.decode("utf-8")

    if await is_response_processing(user_id):
        await message.answer(
            "<b>–ó–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...</b> ‚è≥\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ."
        )
        return

    waiting_message = await message.answer("<b>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...</b> ‚è≥")
    waiting_message_id = waiting_message.message_id

    # Generate embedding for the user query for vector search
    # embedding = await generate_embedding(user_query, openai_client)

    # Store the user query in vector database
    await vector_storage_service.store_user_query(
        user_id, user_query, embedding=None
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π intent
    intent_locked = await check_intent_lock(user_id)

    if intent_locked:
        # –ï—Å–ª–∏ intent –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        intent = await get_user_intent(user_id)
        logger.info(
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π intent –¥–ª—è user {user_id}: {intent}"
        )
    else:
        try:
            # Try to find similar queries for context
            similar_queries = (
                await vector_storage_service.find_similar_queries(
                    user_query, limit=3
                )
            )
            if similar_queries:
                logger.info(
                    f"Found {len(similar_queries)} similar queries for user {user_id}"
                )

            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è intent
            intent = await intent_service.classify_intent(user_id, user_query)
            logger.info(
                f"Intent –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {intent}"
            )
        except Exception as e:
            intent = "unknown"
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ intent: {e}")

    # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º intent
    try:
        rephrased_query = await intent_service.rephrase_query(
            user_id, user_query
        )
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω: {rephrased_query}")
    except Exception as e:
        rephrased_query = user_query
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_auth = await is_user_authenticated(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
    show_auth_prompt = await should_show_auth_prompt(user_id)

    task = {
        "type": "llm_task",
        "task_id": str(uuid.uuid4()),
        "user_id": user_id,
        "chat_id": chat_id,
        "user_query": user_query,  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        "rephrased_query": rephrased_query,  # –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        "model": str(model) if model else None,
        "waiting_message_id": waiting_message_id,
        "intent": intent,  # –î–æ–±–∞–≤–ª—è–µ–º intent –≤ –∑–∞–¥–∞—á—É
        "is_authenticated": is_auth,  # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        "show_auth_prompt": show_auth_prompt,  # –ù—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        "timestamp": datetime.now().isoformat(),
        "vector_store_task_id": message.message_id,  # ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    }

    logger.debug(f"Prepared task: {task}")
    await publish_to_queue(task)

    await log_interaction(
        message.from_user.id,
        message.from_user.username or "",
        user_query,
        response_text="",
    )


@router.message()
async def handle_non_text(message: Message):
    await message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> üìù")
